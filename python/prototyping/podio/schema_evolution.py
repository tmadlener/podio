#!/usr/bin/env python3

from .collection import CollectionBuffers, DataBuffer

import logging
logger = logging.getLogger(__name__)

# Taking serious short cuts here. This will have to be some plug-in mechanism
# that dynamically loads the necessary evolution code, which in turn will
# partially auto-generated by podio with the possibility to "augment" the
# generated code in well-defined ways to arrive at a complete evolution. All the
# details of how this code is generated and how it is effectively loaded to be
# present when it needs to be present is completely ignored here.


def EVOLVE_X_FROM_1_TO_3(buffers: CollectionBuffers) -> CollectionBuffers:
  """Evolve datatype X from version 1 to version 3"""
  logger.info('Evolving type X from version 1 to version 3')
  # What do we do in reality? Copy the buffer and discard the input, or do an
  # inplace update if possible. Probably taking the buffers by value, such that
  # we can easily decide to do whatever we want.
  buffers.data = DataBuffer(100002) # To potentially see we did some changes outside
  return buffers

def EVOLVE_Y_FROM_2_TO_3(buffers: CollectionBuffers) -> CollectionBuffers:
  logger.info('Evolving type Y from version 2 to version 3')
  buffers.data = DataBuffer(102)
  return buffers

# Here we use a map that stores for each datatype all the available schema
# evolutions from a "start" version to the current version.
EVOLUTION_TABLE = {
  'X': {
    1: EVOLVE_X_FROM_1_TO_3,
  },
  'Y': {
    2: EVOLVE_Y_FROM_2_TO_3
  }
}
# Since the schema version is global for a given datamodel, we can obtain the
# current schema version via a global static const(expr) variable and do not
# have to transport this information to where we need it. In reality this is
# defined as part of the datamodel
CURRENT_SCHEMA_VERSION = 3


def evolve_schema(datatype: str, buffers: CollectionBuffers) -> CollectionBuffers:
  """Do the schema evolution on the input buffers to arrive at the desired schema
  version on the output. NOTE: the target schema version is taking from global
  state (see above)
  """
  buffer_version = buffers.schema_version
  logger.info(f'evolve_schema(datatype={datatype}, buffers={id(buffers)}, buffer version={buffer_version})')

  if buffer_version == CURRENT_SCHEMA_VERSION:
    logger.debug('No schema evolution necessary')
    return buffers

  # TODO: Can we exlude that this ever happens? What do we do in these cases if
  # we cannot exlcude this?
  evo_funcs_type = EVOLUTION_TABLE.get(datatype, None)
  if not evo_funcs_type:
    logger.error(f'No schema evolution function available for datatype {datatype}. Skipping evolution')
    return buffers

  evolution_f = evo_funcs_type.get(buffer_version, None)
  if not evolution_f:
    logger.error(f'No schema evolution function available from version {buffer_version} to {CURRENT_SCHEMA_VERSION} for datatype {datatype}. Skipping evolution')
    return buffers

  return evolution_f(buffers)
