name: mac

on: [push, pull_request]

jobs:
  test:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
    - name: Gather system information (1)
      run: |
        env
        which python
        python -c 'import sys; print(sys.version)'
    - name: Download ROOT
      run: |
        curl -O https://lcd-data.web.cern.ch/lcd-data/ROOT/root_v6.20.02.macosx64-10.15-clang110_Xcode113_19D76.tar.gz
        tar xf root_v6.20.02.macosx64-10.15-clang110_Xcode113_19D76.tar.gz
        pip install -r requirements.txt
    - name: Gather system information (2)
      run: |
        source root/bin/thisroot.sh
        env
        which python
        python -c 'import sys; print(sys.version)'
        python -c 'import jinja2; print("jinja2 imported")'
        python -c 'import yaml; print("yaml imported")'
    - name: Check different env variables
      run: |
        for var in CLING_STANDARD_PCH CMAKE_PREFIX_PATH LIBPATH JUPYTER_PATH PYTHONPATH ROOTSYS SHLIB_PATH; do
        declare "__${var}"="${!var}"
        unset ${var}
        done
        env
        for var in CLING_STANDARD_PCH CMAKE_PREFIX_PATH LIBPATH JUPYTER_PATH PYTHONPATH ROOTSYS SHLIB_PATH; do
        dunder_var="__${var}"
        export "${var}"="${!dunder_var}"
        echo "set "${var}
        echo ${var} = ${!var}
        python -c 'import sys; print(sys.version)' || echo "sys failure"
        python -c 'import jinja2; print("jinja2 imported")' || echo "jinja2 failure"
        python -c 'import yaml; print("yaml imported")' || echo "yaml failure"
        python -c 'import ROOT; print("ROOT imported")' || echo "ROOT failure"
        unset ${var}
        done
    - name: Compile and test
      run: |
        source root/bin/thisroot.sh
        mkdir build install
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=17  -DCMAKE_CXX_FLAGS=" -fdiagnostics-color=always " ..
        make -j4 --keep-going
        make install
        ctest --output-on-failure
